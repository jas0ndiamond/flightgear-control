apply plugin: 'java'
apply plugin: 'distribution'
apply from: 'dependencies.gradle'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    //need both of these maven repos for geotools
    maven {
        url "https://maven.geo-solutions.it/"
    }
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    
    mavenCentral()
}

dependencies {

    implementation libs.flightgear_control
    implementation libs.flightgear_control_gateway
    implementation libs.geotools
    
    implementation libs.flightgear_control_test
    testImplementation libs.flightgear_control_test
}

ext {
    fgControlVersion = "0.2"
    title = "flightgear-control"
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'src/main/test'
        }
    }
}

//just want zip
distTar.enabled(false)
distZip.dependsOn("jar")

distributions {
    //the jar, libs, protocol files
    
    main {
        distributionBaseName = title
        
        contents {
            into('') {
                from( project.file("build/libs/"))
            }
            into('scripts') {
                from( project.file("scripts"))
            }
            into('protocols') {
                from( project.file("protocol"))
            }
        }
    }
}

//may need to run the 'clean' task first
test {
    useTestNG() {
        useDefaultListeners = true
        suites "src/main/test/resources/testng.xml"
    }
    beforeTest { thisTest -> println("Executing test: ${thisTest.name} [${thisTest.className}]") }
    afterTest { thisTest, result -> println("Executed test: ${thisTest.name} [${thisTest.className}] with result ${result.resultType}") }
}

jar {
    archiveBaseName = title 
    archiveVersion = fgControlVersion

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from sourceSets.main.output    
    
    manifest {
        //no main- not directly runnable as we have multiple demo apps
        attributes ([
            "Package-Title": "flightgear-control",
            "Package-Version": fgControlVersion
        ])
    }
    
    exclude (
        "org/jason/fgcontrol/aircraft/c172p/app/**",
        "org/jason/fgcontrol/aircraft/f15c/app/**",
        "org/jason/fgcontrol/connection/sockets/app/**",
        "org/jason/fgcontrol/connection/telnet/app/**",
        "org/jason/fgcontrol/test/**",
        "org/jason/fgcontrol/aircraft/view/app/**"
    )
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'src'
    archiveVersion = fgControlVersion
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from sourceSets.main.allSource 

    //exclude mains
    exclude( 
        "org/jason/fgcontrol/aircraft/c172p/app/**",
        "org/jason/fgcontrol/aircraft/f15c/app/**",
        "org/jason/fgcontrol/connection/sockets/app/**",
        "org/jason/fgcontrol/connection/telnet/app/**",
        "org/jason/fgcontrol/test/**",
        "org/jason/fgcontrol/aircraft/view/app/**"
    )
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//build a fat jar that we can run the aircraft main programs from
task appJar(type: Jar) {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    //fatjar to run flight applications

    classifier = 'app'
    archiveVersion = fgControlVersion
    
    manifest {
        //no main- not directly runnable as we have multiple demo apps
        attributes ([
            "Package-Title": "flightgear-control",
            "Package-Version": fgControlVersion
        ])
    }
    
    from sourceSets.main.output    

    from (configurations.runtimeClasspath.collect { entry -> zipTree(entry) }) {
        //class files from classpath including thirdparty
        //strip meta stuff that causes SecurityExceptions
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        
        //don't need testng resources
        exclude 'org/testng**/'
        exclude 'testng*'
    }
}

