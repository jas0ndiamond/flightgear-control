apply plugin: 'java'
apply plugin: 'distribution'
apply from: 'dependencies.gradle'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    //need both of these maven repos for geotools
    maven {
        url "https://maven.geo-solutions.it/"
    }
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    
    mavenCentral()
}

dependencies {

    implementation libs.flightgear_control
    implementation libs.geotools
    
    testImplementation libs.flightgear_control_test
}

ext {
    fgControlVersion = "0.1"
    title = "flightgear-control"
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'src/main/test'
        }
    }
}

//just want zip
distTar.enabled(false)
distZip.dependsOn("jar")

distributions {
    //the jar, libs, protocol files
    
    main {
        distributionBaseName = title
        
        contents {
            into('') {
                from( project.file("build/libs/"))
            }
            into('scripts') {
                from( project.file("scripts"))
            }
            into('protocols') {
                from( project.file("protocol"))
            }
        }
    }
}

//may need to run the 'clean' task first
test {
    useTestNG() {
        useDefaultListeners = true
        suites "src/main/test/resources/testng.xml"
    }
    beforeTest { thisTest -> println("Executing test: ${thisTest.name} [${thisTest.className}]") }
    afterTest { thisTest, result -> println("Executed test: ${thisTest.name} [${thisTest.className}] with result ${result.resultType}") }
}

jar {
    archiveBaseName = title 
    archiveVersion = fgControlVersion

    from(sourceSets.main.output)
    manifest {
    }
}

//TODO: broken fix it
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'src'
    archiveVersion = fgControlVersion
    
    from sourceSets.main.allSource
}

